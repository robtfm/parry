//! Transformation, simplification and decomposition of meshes.

#[cfg(feature = "dim3")]
pub(crate) use self::convex_hull2::convex_hull2_idx;
#[cfg(feature = "dim2")]
pub use self::convex_hull2::{convex_hull2 as convex_hull, convex_hull2_idx as convex_hull_idx};
#[cfg(feature = "dim3")]
pub use self::convex_hull3::{check_convex_hull, convex_hull, try_convex_hull};
#[cfg(feature = "dim3")]
pub use self::mesh_intersection::intersect_meshes;
pub use self::polygon_intersection::{
    convex_polygons_intersection, convex_polygons_intersection_points,
};


#[derive(Debug, PartialEq, Clone)]
/// Errors generated by the convex-hull calculation.
pub enum ConvexHullError {
    /// Reached an impossible configuration in the convex-hull calculation,
    /// likely because of a bug.
    InternalError(&'static str),
    /// The convex hull calculation was unable to find a support point.
    /// This generally happens if the input point set contains invalid points (with NaN coordinates)
    /// or if they are almost coplanar.
    MissingSupportPoint,
    /// Reached a piece of code we shouldnâ€™t (internal error).
    Unreachable,
}

impl std::fmt::Display for ConvexHullError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ConvexHullError::InternalError(reason) => write!(f, "InternalError({})", reason),
            ConvexHullError::MissingSupportPoint => write!(f, "MissingSupportPoint"),
            ConvexHullError::Unreachable => write!(f, "Unreachable"),
        }
    }
}

impl std::error::Error for ConvexHullError {}


mod convex_hull2;
#[cfg(feature = "dim3")]
mod convex_hull3;
pub(crate) mod convex_hull_utils;

mod polygon_intersection;
/// Approximate convex decomposition using the VHACD algorithm.
pub mod vhacd;
/// Voxelization of a 2D polyline or 3D triangle mesh.
pub mod voxelization;

#[cfg(feature = "dim2")]
pub(crate) mod ear_clipping;
#[cfg(feature = "dim2")]
pub(crate) mod hertel_mehlhorn;
#[cfg(feature = "dim2")]
pub use hertel_mehlhorn::{hertel_mehlhorn, hertel_mehlhorn_idx};
#[cfg(feature = "dim3")]
mod mesh_intersection;
#[cfg(feature = "dim3")]
mod to_outline;
#[cfg(feature = "dim2")]
mod to_polyline;
#[cfg(feature = "dim3")]
mod to_trimesh;
pub mod utils;
